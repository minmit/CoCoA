CreditManager Rate_Limiter (Flock f){
	expose Float r;
	expose Int cap;
	Int tokens, last_time = now;

	def deq_criteria(Packet pkt): Pred{
		return (pkt.send_time = now);
	}

	def on_enqueue(Packet pkt){
		tokens = tokens + r * ( now - last_time )
		if (tokens > cap){
			tokens = cap;
		}
		if (pkt.length <= tokens){
			pkt.send_time = now;
		}
		else{
			pkt.send_time = now + ( pkt.length - tokens ) / r;
		}
		tokens = tokens - pkt.length;
		last_time = now;
	}

	def on_dequeue(Packet pkt){}
}

Metric new_ack (Flock f){
	Int val;

	def init() : void {
		val = 0;
	}

	def update(f.ack_rcvd meta){
		if (meta.pkt.tcp.seq > f.max_ack){
			val = 1;
		}
	}

	def val(): Int {
		return val;
	}
}

ASM Timely(Flock f, Param params){
	Float prev_rtt, min_rtt, rtt_diff, new_diff;
	Float norm_grad;
	Float alpha, beta, gamma, t_low, t_high;
	Int N;

	State Start{
		prev_rtt = 0;
		min_rtt = 0;
		f.cm.rate = params.init_rate;
	};

	State RateCompute{
		if (prev_rtt > 0){
			new_diff = pkt.rtt - prev_rtt;
			prev_rtt = pkt.rtt;
			rtt_diff = (1 - alpha) * rtt_diff + 
					   alpha * new_rtt_diff;
			if (pkt.rtt < min_rtt){
				min_rtt = pkt.rtt;
			}
			norm_grad = rtt_diff / min_rtt;

			if (pkt.rtt < t_low){
				f.cm.r = f.cm.r * gamma;
			}
			else if(new_rtt > t_high){
				f.cm.r = f.cm.r * (1 - beta * (1 - t_high / pkt.rtt));
			}
			else if(norm_grad <= 0){
				N += 1;
				if (N < 5){
					f.cm.r += gamma;
				}
				else{
					f.cm.r += N * gamma;
				}
			}
			else{
				f.cm.r = f.cm.r * ( 1 - beta * norm_gard);
			}
		}
	};

	Init Start;

	Transitions{
		| Start on always ==> RateCompute
		| RateCompute on rising(f.new_ack, 0) ==> RateCompute
	}
}
